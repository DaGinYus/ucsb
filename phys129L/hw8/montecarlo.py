"""
TKC!
Monte Carlo Circle
Matthew Wong
Phys 129L Hw8 Pb1
2022-03-03
"""


import sys
import numpy as np


def input_npts():
    """Gets the number of points to use either from CLI or raw input.

    Returns:
        npts (int): The number of points.
    """
    if len(sys.argv) > 1:
        npts = sys.argv[1]
    else:
        npts = input("Enter the number of points: ")
    try:
        npts = int(npts)
        if npts <= 0:
            raise ValueError
    except ValueError:
        print("Invalid input. Please enter a positive integer.")
        return
    return npts


def dist(p, O=(1,1)):
    """The Euclidean distance between two points.

    Args:
        p: An array of points in [(x1,y1), (x2,y2), ...] format.
        O: A tuple defining the reference point, initialized to
            (1,1) as per the homework requirements.
    Returns:
        dist: An array of the distances between the points.
    """
    return np.sqrt((p[:,0]-O[0])**2 + (p[:,1]-O[1])**2)


def integrate(npts):
    """Performs Monte Carlo integration over a function.

    Points are generated by taking two randomly generated arrays and
    zipping them together. This is far faster than using a for loop.

    Args:
        npts: The number of points to test.
    Returns:
        area: The integral area.
        var: The fractional variance.
    """
    # use bounds [0,2] in both x and y
    rand_x = np.random.uniform(0.0, 2.0, npts)
    rand_y = np.random.uniform(0.0, 2.0, npts)
    points = np.column_stack((rand_x, rand_y))
    dists = dist(points)
    inside = np.where(dists < 1)[0]
    # bounding box is 2x2
    area = 4 * len(inside)/npts
    var = np.std(dists)**2 / npts
    return area, var


def main():
    """Calculates the value of Pi using Monte Carlo methods."""
    npts = input_npts()
    if not npts:
        return
    # area corresponds to pi since we have radius 1
    pi, var = integrate(npts)
    print(f"Calculated Pi: {pi}")
    print(f"Fractional Error: {var}")


if __name__ == "__main__":
    main()
